# The personal bash profile options
source $HOME/.dotfiles/bash/bash_personal

# The rest might be quite machine specific...
# or set up by the tools themselves
# might need to actually not symlink bash_profile but just
# prepend the above to it as part of setup...

# Now with the config refactor, we need to explicitly set our rails env:
export RAILS_ENV=development

### POSTGRES ###
# Set the data location of postgres so you don't need it in your start/stop commands:
# TODO: Remove (now that we use Postgres.app):
# export PGDATA='/usr/local/var/postgres/'
# Add Postgres.app's bin to the path:
export PATH=$PATH:/Applications/Postgres.app/Contents/Versions/latest/bin
# Increase the 2 kernel memory management values for postgres from very small, to ok values:
#UPDATE: Shouldn't need these params. Re-installing postgres from brew fixed this issue:
#sudo sysctl -w kern.sysv.shmall=65536
#sudo sysctl -w kern.sysv.shmmax=16777216
### END POSTGRES###

# Running bundle install doesn't work for website because of libv8 needing native extensions.
# This options fixes that:
#export RUBYOPT=-rrubygems gem install therubyracer

# Set coloured directory/file highlighting. See: http://geekology.co.za/article/2009/04/how-to-enable-terminals-directory-and-file-color-highlighting-in-mac-os-x
export CLICOLOR=1
export LSCOLORS=ExFxCxDxBxegedabagacad
#export LSCOLORS=GxFxCxDxBxegedabagaced

### Start Mark's Preferences ###

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

parse_git_remote() {
    tmp=$(parse_git_branch)
    return `cat .git/config | grep $tmp -A 4 | grep remote | head -1 | sed -e 's/remote = \(.*\)/\1/'`
}

get_region_and_rails_env() {
  if [ "$AGW_region" == "" ]; then
    return
  else
    if [ "$RAILS_ENV" == "" ]; then
      rails_env_tmp=dev
    else
      rails_env_tmp=$RAILS_ENV
    fi

    if [ -n "$AGW_database_name" ]; then
      append_db_name_tmp=":$AGW_database_name"
    fi

    region_tmp=$AGW_region
    if [ "$AGW_region" == "us" ]; then
      region_tmp="*USA*"
    fi

    echo " $region_tmp:$rails_env_tmp$append_db_name_tmp"
  fi
}

export PS1="\[\033[01;34m\]\W\[\033[31m\]\$(parse_git_branch)\[\033[33m\]\$(get_region_and_rails_env) \[\033[00m\]$\[\033[00m\] "
export PATH=/Users/swrathal/bin:/usr/local/bin:/usr/local/sbin:$PATH:./node_modules/.bin
export HISTTIMEFORMAT="%h/%d - %H:%M:%S "

# This must be below the PATH command above, otherwise the 'node' in /usr/local/bin overrides nvm:
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm

source ~/bin/git-completion.bash

### End Mark's Preferences ###

# ImageMagick ##########################################################################################################
# NOTE: See below RE getting ImageMagick working with RMagick AND jpeg (for static maps)
# c.f: https://stackoverflow.com/a/41788501/1852005
#
# website (master) au:dev $ brew install imagemagick@6
# ==> Downloading https://homebrew.bintray.com/bottles/imagemagick@6-6.9.9-50.sierra.bottle.tar.gz
# ######################################################################## 100.0%
# ==> Pouring imagemagick@6-6.9.9-50.sierra.bottle.tar.gz
# ==> Caveats
# This formula is keg-only, which means it was not symlinked into /usr/local,
# because this is an alternate version of another formula.
#
# If you need to have this software first in your PATH run:
export PATH="/usr/local/opt/imagemagick@6/bin:$PATH"
# For compilers to find this software you may need to set:
#     LDFLAGS:  -L/usr/local/opt/imagemagick@6/lib
#     CPPFLAGS: -I/usr/local/opt/imagemagick@6/include
# For pkg-config to find this software you may need to set:
#     PKG_CONFIG_PATH: /usr/local/opt/imagemagick@6/lib/pkgconfig
########################################################################################################################

export JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/"
export GEOSERVER_HOME="/opt/geoserver/"

# PYTHON SETTINGS START #############################################################

# WORK SETTINGS:
# Setting PATH for Python 3.6
# The original version is saved in .bash_profile.pysave
# Note that to run python 3.6, the command is `python3`, not `python`
PATH="/Library/Frameworks/Python.framework/Versions/3.6/bin:${PATH}"
export PATH

# HOME SETTINGS:
export PATH=$PATH:$HOME/Library/Python/3.7/bin

# PYTHON SETTINGS END ###############################################################

# Adding GDAL to the PATH:
export PATH=/Library/Frameworks/GDAL.framework/Programs:$PATH
# which overrides e.g:
# ~ $ which ogr2ogr
# /Applications/Postgres.app/Contents/Versions/latest/bin/ogr2ogr

# Required for Nix to work (c.f: https://github.com/agworld/website/tree/master/nix)
. $HOME/.nix-profile/etc/profile.d/nix.sh

# rvm needs to be at the bottom of the file in case there are other lines in .[ba|z]shrc that redefine path:

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
if [ -e /Users/steve/.nix-profile/etc/profile.d/nix.sh ]; then . /Users/steve/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer
